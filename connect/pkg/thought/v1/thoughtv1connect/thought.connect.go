// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: thought/v1/thought.proto

package thoughtv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	v1 "presentations/connect/pkg/thought/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ThoughtServiceName is the fully-qualified name of the ThoughtService service.
	ThoughtServiceName = "thought.v1.ThoughtService"
)

// ThoughtServiceClient is a client for the thought.v1.ThoughtService service.
type ThoughtServiceClient interface {
	GetThought(context.Context, *connect_go.Request[v1.GetThoughtRequest]) (*connect_go.Response[v1.GetThoughtResponse], error)
	ReceiveThoughts(context.Context, *connect_go.Request[v1.ReceiveThoughtsRequest]) (*connect_go.ServerStreamForClient[v1.ReceiveThoughtsResponse], error)
	SendThoughts(context.Context) *connect_go.ClientStreamForClient[v1.SendThoughtsRequest, v1.SendThoughtsResponse]
	ConverseThoughts(context.Context) *connect_go.BidiStreamForClient[v1.ConverseThoughtsRequest, v1.ConverseThoughtsResponse]
}

// NewThoughtServiceClient constructs a client for the thought.v1.ThoughtService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewThoughtServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ThoughtServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &thoughtServiceClient{
		getThought: connect_go.NewClient[v1.GetThoughtRequest, v1.GetThoughtResponse](
			httpClient,
			baseURL+"/thought.v1.ThoughtService/GetThought",
			opts...,
		),
		receiveThoughts: connect_go.NewClient[v1.ReceiveThoughtsRequest, v1.ReceiveThoughtsResponse](
			httpClient,
			baseURL+"/thought.v1.ThoughtService/ReceiveThoughts",
			opts...,
		),
		sendThoughts: connect_go.NewClient[v1.SendThoughtsRequest, v1.SendThoughtsResponse](
			httpClient,
			baseURL+"/thought.v1.ThoughtService/SendThoughts",
			opts...,
		),
		converseThoughts: connect_go.NewClient[v1.ConverseThoughtsRequest, v1.ConverseThoughtsResponse](
			httpClient,
			baseURL+"/thought.v1.ThoughtService/ConverseThoughts",
			opts...,
		),
	}
}

// thoughtServiceClient implements ThoughtServiceClient.
type thoughtServiceClient struct {
	getThought       *connect_go.Client[v1.GetThoughtRequest, v1.GetThoughtResponse]
	receiveThoughts  *connect_go.Client[v1.ReceiveThoughtsRequest, v1.ReceiveThoughtsResponse]
	sendThoughts     *connect_go.Client[v1.SendThoughtsRequest, v1.SendThoughtsResponse]
	converseThoughts *connect_go.Client[v1.ConverseThoughtsRequest, v1.ConverseThoughtsResponse]
}

// GetThought calls thought.v1.ThoughtService.GetThought.
func (c *thoughtServiceClient) GetThought(ctx context.Context, req *connect_go.Request[v1.GetThoughtRequest]) (*connect_go.Response[v1.GetThoughtResponse], error) {
	return c.getThought.CallUnary(ctx, req)
}

// ReceiveThoughts calls thought.v1.ThoughtService.ReceiveThoughts.
func (c *thoughtServiceClient) ReceiveThoughts(ctx context.Context, req *connect_go.Request[v1.ReceiveThoughtsRequest]) (*connect_go.ServerStreamForClient[v1.ReceiveThoughtsResponse], error) {
	return c.receiveThoughts.CallServerStream(ctx, req)
}

// SendThoughts calls thought.v1.ThoughtService.SendThoughts.
func (c *thoughtServiceClient) SendThoughts(ctx context.Context) *connect_go.ClientStreamForClient[v1.SendThoughtsRequest, v1.SendThoughtsResponse] {
	return c.sendThoughts.CallClientStream(ctx)
}

// ConverseThoughts calls thought.v1.ThoughtService.ConverseThoughts.
func (c *thoughtServiceClient) ConverseThoughts(ctx context.Context) *connect_go.BidiStreamForClient[v1.ConverseThoughtsRequest, v1.ConverseThoughtsResponse] {
	return c.converseThoughts.CallBidiStream(ctx)
}

// ThoughtServiceHandler is an implementation of the thought.v1.ThoughtService service.
type ThoughtServiceHandler interface {
	GetThought(context.Context, *connect_go.Request[v1.GetThoughtRequest]) (*connect_go.Response[v1.GetThoughtResponse], error)
	ReceiveThoughts(context.Context, *connect_go.Request[v1.ReceiveThoughtsRequest], *connect_go.ServerStream[v1.ReceiveThoughtsResponse]) error
	SendThoughts(context.Context, *connect_go.ClientStream[v1.SendThoughtsRequest]) (*connect_go.Response[v1.SendThoughtsResponse], error)
	ConverseThoughts(context.Context, *connect_go.BidiStream[v1.ConverseThoughtsRequest, v1.ConverseThoughtsResponse]) error
}

// NewThoughtServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewThoughtServiceHandler(svc ThoughtServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/thought.v1.ThoughtService/GetThought", connect_go.NewUnaryHandler(
		"/thought.v1.ThoughtService/GetThought",
		svc.GetThought,
		opts...,
	))
	mux.Handle("/thought.v1.ThoughtService/ReceiveThoughts", connect_go.NewServerStreamHandler(
		"/thought.v1.ThoughtService/ReceiveThoughts",
		svc.ReceiveThoughts,
		opts...,
	))
	mux.Handle("/thought.v1.ThoughtService/SendThoughts", connect_go.NewClientStreamHandler(
		"/thought.v1.ThoughtService/SendThoughts",
		svc.SendThoughts,
		opts...,
	))
	mux.Handle("/thought.v1.ThoughtService/ConverseThoughts", connect_go.NewBidiStreamHandler(
		"/thought.v1.ThoughtService/ConverseThoughts",
		svc.ConverseThoughts,
		opts...,
	))
	return "/thought.v1.ThoughtService/", mux
}

// UnimplementedThoughtServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedThoughtServiceHandler struct{}

func (UnimplementedThoughtServiceHandler) GetThought(context.Context, *connect_go.Request[v1.GetThoughtRequest]) (*connect_go.Response[v1.GetThoughtResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("thought.v1.ThoughtService.GetThought is not implemented"))
}

func (UnimplementedThoughtServiceHandler) ReceiveThoughts(context.Context, *connect_go.Request[v1.ReceiveThoughtsRequest], *connect_go.ServerStream[v1.ReceiveThoughtsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("thought.v1.ThoughtService.ReceiveThoughts is not implemented"))
}

func (UnimplementedThoughtServiceHandler) SendThoughts(context.Context, *connect_go.ClientStream[v1.SendThoughtsRequest]) (*connect_go.Response[v1.SendThoughtsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("thought.v1.ThoughtService.SendThoughts is not implemented"))
}

func (UnimplementedThoughtServiceHandler) ConverseThoughts(context.Context, *connect_go.BidiStream[v1.ConverseThoughtsRequest, v1.ConverseThoughtsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("thought.v1.ThoughtService.ConverseThoughts is not implemented"))
}
