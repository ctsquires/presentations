// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: simple/v1/simple.proto

package simplev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	v1 "presentations/connect/pkg/simple/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SimpleServiceName is the fully-qualified name of the SimpleService service.
	SimpleServiceName = "simple.v1.SimpleService"
)

// SimpleServiceClient is a client for the simple.v1.SimpleService service.
type SimpleServiceClient interface {
	GetIdea(context.Context, *connect_go.Request[v1.GetIdeaRequest]) (*connect_go.Response[v1.Idea], error)
	CreateIdea(context.Context, *connect_go.Request[v1.CreateIdeaRequest]) (*connect_go.Response[v1.Idea], error)
	ListIdeas(context.Context, *connect_go.Request[v1.ListIdeasRequest]) (*connect_go.Response[v1.ListIdeasResponse], error)
	DeleteIdea(context.Context, *connect_go.Request[v1.DeleteIdeaRequest]) (*connect_go.Response[v1.DeleteIdeaResponse], error)
	UpdateIdea(context.Context, *connect_go.Request[v1.UpdateIdeaRequest]) (*connect_go.Response[v1.Idea], error)
}

// NewSimpleServiceClient constructs a client for the simple.v1.SimpleService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSimpleServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SimpleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &simpleServiceClient{
		getIdea: connect_go.NewClient[v1.GetIdeaRequest, v1.Idea](
			httpClient,
			baseURL+"/simple.v1.SimpleService/GetIdea",
			opts...,
		),
		createIdea: connect_go.NewClient[v1.CreateIdeaRequest, v1.Idea](
			httpClient,
			baseURL+"/simple.v1.SimpleService/CreateIdea",
			opts...,
		),
		listIdeas: connect_go.NewClient[v1.ListIdeasRequest, v1.ListIdeasResponse](
			httpClient,
			baseURL+"/simple.v1.SimpleService/ListIdeas",
			opts...,
		),
		deleteIdea: connect_go.NewClient[v1.DeleteIdeaRequest, v1.DeleteIdeaResponse](
			httpClient,
			baseURL+"/simple.v1.SimpleService/DeleteIdea",
			opts...,
		),
		updateIdea: connect_go.NewClient[v1.UpdateIdeaRequest, v1.Idea](
			httpClient,
			baseURL+"/simple.v1.SimpleService/UpdateIdea",
			opts...,
		),
	}
}

// simpleServiceClient implements SimpleServiceClient.
type simpleServiceClient struct {
	getIdea    *connect_go.Client[v1.GetIdeaRequest, v1.Idea]
	createIdea *connect_go.Client[v1.CreateIdeaRequest, v1.Idea]
	listIdeas  *connect_go.Client[v1.ListIdeasRequest, v1.ListIdeasResponse]
	deleteIdea *connect_go.Client[v1.DeleteIdeaRequest, v1.DeleteIdeaResponse]
	updateIdea *connect_go.Client[v1.UpdateIdeaRequest, v1.Idea]
}

// GetIdea calls simple.v1.SimpleService.GetIdea.
func (c *simpleServiceClient) GetIdea(ctx context.Context, req *connect_go.Request[v1.GetIdeaRequest]) (*connect_go.Response[v1.Idea], error) {
	return c.getIdea.CallUnary(ctx, req)
}

// CreateIdea calls simple.v1.SimpleService.CreateIdea.
func (c *simpleServiceClient) CreateIdea(ctx context.Context, req *connect_go.Request[v1.CreateIdeaRequest]) (*connect_go.Response[v1.Idea], error) {
	return c.createIdea.CallUnary(ctx, req)
}

// ListIdeas calls simple.v1.SimpleService.ListIdeas.
func (c *simpleServiceClient) ListIdeas(ctx context.Context, req *connect_go.Request[v1.ListIdeasRequest]) (*connect_go.Response[v1.ListIdeasResponse], error) {
	return c.listIdeas.CallUnary(ctx, req)
}

// DeleteIdea calls simple.v1.SimpleService.DeleteIdea.
func (c *simpleServiceClient) DeleteIdea(ctx context.Context, req *connect_go.Request[v1.DeleteIdeaRequest]) (*connect_go.Response[v1.DeleteIdeaResponse], error) {
	return c.deleteIdea.CallUnary(ctx, req)
}

// UpdateIdea calls simple.v1.SimpleService.UpdateIdea.
func (c *simpleServiceClient) UpdateIdea(ctx context.Context, req *connect_go.Request[v1.UpdateIdeaRequest]) (*connect_go.Response[v1.Idea], error) {
	return c.updateIdea.CallUnary(ctx, req)
}

// SimpleServiceHandler is an implementation of the simple.v1.SimpleService service.
type SimpleServiceHandler interface {
	GetIdea(context.Context, *connect_go.Request[v1.GetIdeaRequest]) (*connect_go.Response[v1.Idea], error)
	CreateIdea(context.Context, *connect_go.Request[v1.CreateIdeaRequest]) (*connect_go.Response[v1.Idea], error)
	ListIdeas(context.Context, *connect_go.Request[v1.ListIdeasRequest]) (*connect_go.Response[v1.ListIdeasResponse], error)
	DeleteIdea(context.Context, *connect_go.Request[v1.DeleteIdeaRequest]) (*connect_go.Response[v1.DeleteIdeaResponse], error)
	UpdateIdea(context.Context, *connect_go.Request[v1.UpdateIdeaRequest]) (*connect_go.Response[v1.Idea], error)
}

// NewSimpleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSimpleServiceHandler(svc SimpleServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/simple.v1.SimpleService/GetIdea", connect_go.NewUnaryHandler(
		"/simple.v1.SimpleService/GetIdea",
		svc.GetIdea,
		opts...,
	))
	mux.Handle("/simple.v1.SimpleService/CreateIdea", connect_go.NewUnaryHandler(
		"/simple.v1.SimpleService/CreateIdea",
		svc.CreateIdea,
		opts...,
	))
	mux.Handle("/simple.v1.SimpleService/ListIdeas", connect_go.NewUnaryHandler(
		"/simple.v1.SimpleService/ListIdeas",
		svc.ListIdeas,
		opts...,
	))
	mux.Handle("/simple.v1.SimpleService/DeleteIdea", connect_go.NewUnaryHandler(
		"/simple.v1.SimpleService/DeleteIdea",
		svc.DeleteIdea,
		opts...,
	))
	mux.Handle("/simple.v1.SimpleService/UpdateIdea", connect_go.NewUnaryHandler(
		"/simple.v1.SimpleService/UpdateIdea",
		svc.UpdateIdea,
		opts...,
	))
	return "/simple.v1.SimpleService/", mux
}

// UnimplementedSimpleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSimpleServiceHandler struct{}

func (UnimplementedSimpleServiceHandler) GetIdea(context.Context, *connect_go.Request[v1.GetIdeaRequest]) (*connect_go.Response[v1.Idea], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("simple.v1.SimpleService.GetIdea is not implemented"))
}

func (UnimplementedSimpleServiceHandler) CreateIdea(context.Context, *connect_go.Request[v1.CreateIdeaRequest]) (*connect_go.Response[v1.Idea], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("simple.v1.SimpleService.CreateIdea is not implemented"))
}

func (UnimplementedSimpleServiceHandler) ListIdeas(context.Context, *connect_go.Request[v1.ListIdeasRequest]) (*connect_go.Response[v1.ListIdeasResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("simple.v1.SimpleService.ListIdeas is not implemented"))
}

func (UnimplementedSimpleServiceHandler) DeleteIdea(context.Context, *connect_go.Request[v1.DeleteIdeaRequest]) (*connect_go.Response[v1.DeleteIdeaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("simple.v1.SimpleService.DeleteIdea is not implemented"))
}

func (UnimplementedSimpleServiceHandler) UpdateIdea(context.Context, *connect_go.Request[v1.UpdateIdeaRequest]) (*connect_go.Response[v1.Idea], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("simple.v1.SimpleService.UpdateIdea is not implemented"))
}
