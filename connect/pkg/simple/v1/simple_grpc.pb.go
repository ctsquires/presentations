// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: simple/v1/simple.proto

package simplev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimpleServiceClient is the client API for SimpleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleServiceClient interface {
	GetIdea(ctx context.Context, in *GetIdeaRequest, opts ...grpc.CallOption) (*Idea, error)
	CreateIdea(ctx context.Context, in *CreateIdeaRequest, opts ...grpc.CallOption) (*Idea, error)
	ListIdeas(ctx context.Context, in *ListIdeasRequest, opts ...grpc.CallOption) (*ListIdeasResponse, error)
	DeleteIdea(ctx context.Context, in *DeleteIdeaRequest, opts ...grpc.CallOption) (*DeleteIdeaResponse, error)
	UpdateIdea(ctx context.Context, in *UpdateIdeaRequest, opts ...grpc.CallOption) (*Idea, error)
}

type simpleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleServiceClient(cc grpc.ClientConnInterface) SimpleServiceClient {
	return &simpleServiceClient{cc}
}

func (c *simpleServiceClient) GetIdea(ctx context.Context, in *GetIdeaRequest, opts ...grpc.CallOption) (*Idea, error) {
	out := new(Idea)
	err := c.cc.Invoke(ctx, "/simple.v1.SimpleService/GetIdea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) CreateIdea(ctx context.Context, in *CreateIdeaRequest, opts ...grpc.CallOption) (*Idea, error) {
	out := new(Idea)
	err := c.cc.Invoke(ctx, "/simple.v1.SimpleService/CreateIdea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) ListIdeas(ctx context.Context, in *ListIdeasRequest, opts ...grpc.CallOption) (*ListIdeasResponse, error) {
	out := new(ListIdeasResponse)
	err := c.cc.Invoke(ctx, "/simple.v1.SimpleService/ListIdeas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) DeleteIdea(ctx context.Context, in *DeleteIdeaRequest, opts ...grpc.CallOption) (*DeleteIdeaResponse, error) {
	out := new(DeleteIdeaResponse)
	err := c.cc.Invoke(ctx, "/simple.v1.SimpleService/DeleteIdea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) UpdateIdea(ctx context.Context, in *UpdateIdeaRequest, opts ...grpc.CallOption) (*Idea, error) {
	out := new(Idea)
	err := c.cc.Invoke(ctx, "/simple.v1.SimpleService/UpdateIdea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleServiceServer is the server API for SimpleService service.
// All implementations must embed UnimplementedSimpleServiceServer
// for forward compatibility
type SimpleServiceServer interface {
	GetIdea(context.Context, *GetIdeaRequest) (*Idea, error)
	CreateIdea(context.Context, *CreateIdeaRequest) (*Idea, error)
	ListIdeas(context.Context, *ListIdeasRequest) (*ListIdeasResponse, error)
	DeleteIdea(context.Context, *DeleteIdeaRequest) (*DeleteIdeaResponse, error)
	UpdateIdea(context.Context, *UpdateIdeaRequest) (*Idea, error)
	mustEmbedUnimplementedSimpleServiceServer()
}

// UnimplementedSimpleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSimpleServiceServer struct {
}

func (UnimplementedSimpleServiceServer) GetIdea(context.Context, *GetIdeaRequest) (*Idea, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdea not implemented")
}
func (UnimplementedSimpleServiceServer) CreateIdea(context.Context, *CreateIdeaRequest) (*Idea, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIdea not implemented")
}
func (UnimplementedSimpleServiceServer) ListIdeas(context.Context, *ListIdeasRequest) (*ListIdeasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIdeas not implemented")
}
func (UnimplementedSimpleServiceServer) DeleteIdea(context.Context, *DeleteIdeaRequest) (*DeleteIdeaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdea not implemented")
}
func (UnimplementedSimpleServiceServer) UpdateIdea(context.Context, *UpdateIdeaRequest) (*Idea, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIdea not implemented")
}
func (UnimplementedSimpleServiceServer) mustEmbedUnimplementedSimpleServiceServer() {}

// UnsafeSimpleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleServiceServer will
// result in compilation errors.
type UnsafeSimpleServiceServer interface {
	mustEmbedUnimplementedSimpleServiceServer()
}

func RegisterSimpleServiceServer(s grpc.ServiceRegistrar, srv SimpleServiceServer) {
	s.RegisterService(&SimpleService_ServiceDesc, srv)
}

func _SimpleService_GetIdea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdeaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServiceServer).GetIdea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple.v1.SimpleService/GetIdea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServiceServer).GetIdea(ctx, req.(*GetIdeaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleService_CreateIdea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdeaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServiceServer).CreateIdea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple.v1.SimpleService/CreateIdea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServiceServer).CreateIdea(ctx, req.(*CreateIdeaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleService_ListIdeas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIdeasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServiceServer).ListIdeas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple.v1.SimpleService/ListIdeas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServiceServer).ListIdeas(ctx, req.(*ListIdeasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleService_DeleteIdea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdeaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServiceServer).DeleteIdea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple.v1.SimpleService/DeleteIdea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServiceServer).DeleteIdea(ctx, req.(*DeleteIdeaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleService_UpdateIdea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIdeaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServiceServer).UpdateIdea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple.v1.SimpleService/UpdateIdea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServiceServer).UpdateIdea(ctx, req.(*UpdateIdeaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SimpleService_ServiceDesc is the grpc.ServiceDesc for SimpleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimpleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simple.v1.SimpleService",
	HandlerType: (*SimpleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIdea",
			Handler:    _SimpleService_GetIdea_Handler,
		},
		{
			MethodName: "CreateIdea",
			Handler:    _SimpleService_CreateIdea_Handler,
		},
		{
			MethodName: "ListIdeas",
			Handler:    _SimpleService_ListIdeas_Handler,
		},
		{
			MethodName: "DeleteIdea",
			Handler:    _SimpleService_DeleteIdea_Handler,
		},
		{
			MethodName: "UpdateIdea",
			Handler:    _SimpleService_UpdateIdea_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simple/v1/simple.proto",
}
